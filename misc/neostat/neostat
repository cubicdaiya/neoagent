#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import curses
import time
import json
import socket
import signal
import datetime

def sig_handler(num, frame):
    global sig_exit_flg
    if num == signal.SIGINT:
        sig_exit_flg = True

def usage():
    s = "Usage: neostat $host $port"
    print s

def recv_stat_json(host, port, size):
    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    c.connect((host,port))
    rcvmsg = c.recv(size)
    c.close()
    return rcvmsg

def connpool_map_string(connpool_map):
    s = ''
    for i in connpool_map:
        s = s + ('%d ' % i)
    return s

def pad_addstr(pad, x, y, s, attr):
    pad.addstr(x, y, s, attr)
    return x + 1

def stats_draw(pad, stats):
    current_datetime = datetime.datetime.today().strftime("%Y-%m-%d %H:%M:%S")
    connpool_map_str = connpool_map_string(stats['connpool_map'])
    nx = 0
    nx = pad_addstr(pad, nx, 0, 'datetime           : '  + current_datetime,                  curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'name               : '  + stats['name'],                     curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'version            : '  + stats['version'],                  curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'host               : '  + stats['host'],                     curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'port               : '  + str(stats['port']),                curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'environment_name   : '  + stats['environment_name'],         curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'start_time         : '  + stats['start_time'],               curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'up_time            : '  + stats['up_time'],                  curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'fsfd               : '  + str(stats['fsfd']),                curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'fsport             : '  + str(stats['fsport']),              curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'fssockpath         : '  + stats['fssockpath'],               curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'target_host        : '  + stats['target_host'],              curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'target_port        : '  + str(stats['target_port']),         curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'backup_host        : '  + stats['backup_host'],              curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'backup_port        : '  + str(stats['backup_port']),         curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'current_target_host: '  + stats['current_target_host'],      curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'current_target_port: '  + str(stats['current_target_port']), curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'error_count        : '  + str(stats['error_count']),         curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'error_count_max    : '  + str(stats['error_count_max']),     curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'conn_max           : '  + str(stats['conn_max']),            curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'connpool_max       : '  + str(stats['connpool_max']),        curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'is_connpool_only   : '  + str(stats['is_connpool_only']),    curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'is_refused_active  : '  + stats['is_refused_active'],        curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'bufsize            : '  + str(stats['bufsize']),             curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'current_conn       : '  + str(stats['current_conn']),        curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'available_conn     : '  + str(stats['available_conn']),      curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'current_conn_max   : '  + str(stats['current_conn_max']),    curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'connpool_map       : '  + connpool_map_str,                  curses.A_NORMAL)

def main(scr):
    global sig_exit_flg, host, port
    curses.cbreak()
    curses.noecho()
    curses.curs_set(0);
    curses.use_default_colors()
    scr.refresh()
    pad = curses.newpad(30, 100)
    pad.nodelay(1)
    while True:
        if pad.getch() == ord('q'):
            break
        if sig_exit_flg == True:
            break
        try:
            stats_json = recv_stat_json(host, port, 8192)
        except socket.error:
            raise Exception("Connection Refused " + host + ":" + str(port))
        try:
            stats = json.loads(stats_json)
        except ValueError:
            raise Exception("Received Invalid JSON String:" + stats_json)
        stats['host'] = host
        stats['port'] = port
        stats_draw(pad, stats)
        pad.refresh(0, 0, 0, 0, 30, 100)
        scr.refresh()
        pad.clear()
        time.sleep(1)
    scr.keypad(0);

if __name__ == '__main__':
    argc = len(sys.argv)
    if argc < 3:
        usage()
        sys.exit(None)
    elif sys.argv[2].isdigit() == False:
        usage()
        sys.exit(None)

    signal.signal(signal.SIGINT, sig_handler)
    sig_exit_flg = False

    host = sys.argv[1]
    port = int(sys.argv[2])

    try:
        curses.wrapper(main)
    except Exception, msg:
        print msg
