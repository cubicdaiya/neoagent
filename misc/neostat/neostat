#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import curses
import time
import json
import socket
import signal
import datetime
import os
import argparse

def sig_handler(num, frame):
    global sig_exit_flg
    if num == signal.SIGINT:
        sig_exit_flg = True

def recv_stat_json(host, port, size):
    if isinstance(port, int):
        c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        c.connect((host, port))
    else:
        c = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        c.connect(port)
    rcvmsg = c.recv(size)
    c.close()
    return rcvmsg

def connpool_map_string(connpool_map):
    s = ''
    for i in connpool_map:
        s = s + ('%d ' % i)
    return s

def worker_map_string(worker_map):
    s = ''
    for i in worker_map:
        if i is True:
            s = s + '1 '
        else:
            s = s + '0 '
    return s

def pad_addstr(pad, x, y, s, attr):
    pad.addstr(x, y, s, attr)
    return x + 1

def stats_draw(pad, stats):
    current_datetime = datetime.datetime.today().strftime("%Y-%m-%d %H:%M:%S")
    connpool_map_str = connpool_map_string(stats['connpool_map'])
    worker_map_str   = connpool_map_string(stats['worker_map'])
    nx = 0
    nx = pad_addstr(pad, nx, 0, 'datetime                    : '  + current_datetime,                           curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'name                        : '  + stats['name'],                              curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'version                     : '  + stats['version'],                           curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'host                        : '  + stats['host'],                              curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'port                        : '  + str(stats['port']),                         curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'environment_name            : '  + stats['environment_name'],                  curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'event_model                 : '  + stats['event_model'],                       curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'start_time                  : '  + stats['start_time'],                        curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'up_time                     : '  + stats['up_time'],                           curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'fsport                      : '  + str(stats['fsport']),                       curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'fssockpath                  : '  + stats['fssockpath'],                        curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'target_host                 : '  + stats['target_host'],                       curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'target_port                 : '  + str(stats['target_port']),                  curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'backup_host                 : '  + stats['backup_host'],                       curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'backup_port                 : '  + str(stats['backup_port']),                  curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'current_target_host         : '  + stats['current_target_host'],               curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'current_target_port         : '  + str(stats['current_target_port']),          curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'error_count                 : '  + str(stats['error_count']),                  curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'error_count_max             : '  + str(stats['error_count_max']),              curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'worker_max                  : '  + str(stats['worker_max']),                   curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'conn_max                    : '  + str(stats['conn_max']),                     curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'connpool_max                : '  + str(stats['connpool_max']),                 curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'is_connpool_only            : '  + str(stats['is_connpool_only']),             curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'is_refused_active           : '  + stats['is_refused_active'],                 curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'request_bufsize             : '  + str(stats['request_bufsize']),              curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'request_bufsize_max         : '  + str(stats['request_bufsize_max']),          curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'request_bufsize_current_max : '  + str(stats['request_bufsize_current_max']),  curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'response_bufsize            : '  + str(stats['response_bufsize']),             curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'response_bufsize_max        : '  + str(stats['response_bufsize_max']),         curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'response_bufsize_current_max: '  + str(stats['response_bufsize_current_max']), curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'current_conn                : '  + str(stats['current_conn']),                 curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'available_conn              : '  + str(stats['available_conn']),               curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'current_conn_max            : '  + str(stats['current_conn_max']),             curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'connpool_map                : '  + connpool_map_str,                           curses.A_NORMAL)
    nx = pad_addstr(pad, nx, 0, 'worker_map                  : '  + worker_map_str,                             curses.A_NORMAL)

def main(scr):
    global sig_exit_flg, host, port
    curses.cbreak()
    curses.noecho()
    curses.curs_set(0);
    curses.use_default_colors()
    scr.refresh()
    pad = curses.newpad(50, 100)
    pad.nodelay(1)
    while True:
        if pad.getch() == ord('q'):
            break
        if sig_exit_flg is True:
            break
        try:
            stats_json = recv_stat_json(host, port, 8192)
        except socket.error:
            raise Exception("Connection Refused " + host + ":" + str(port))
        try:
            stats = json.loads(stats_json)
        except ValueError:
            raise Exception("Received Invalid JSON String:" + stats_json)
        stats['host'] = host
        stats['port'] = port
        stats_draw(pad, stats)
        pad.refresh(0, 0, 0, 0, 50, 100)
        scr.refresh()
        pad.clear()
        time.sleep(1)
    scr.keypad(0);

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='A Status Monitor For Neoagent', add_help=False)
    parser.add_argument('-s', '--sock', action='store',      type=str,      help='unix domain socket path')
    parser.add_argument('-h', '--host', action='store',      type=str,      help='hostname')
    parser.add_argument('-p', '--port', action='store',      type=int,      help='port number')
    parser.add_argument('-o', '--once', action='store_true', default=False, help='if this option specified, neostat gets stats only once')
    parser.add_argument('--help',       action='store_true', default=False, help='show this help message and exit')

    args = parser.parse_args()

    if args.help == True:
        parser.print_help()
        sys.exit(0)
    
    if args.sock is not None and os.path.exists(args.sock):
        host = socket.gethostname()
        port = args.sock
    elif args.host is not None and args.port is not None:
        try:
            socket.gethostbyname(args.host)
        except socket.gaierror:
            parser.print_help()
            sys.exit(None)
        host = args.host
        port = args.port
    else:
        parser.print_help()
        sys.exit(None)

    if args.once == True:
        print recv_stat_json(host, port, 8192)
        sys.exit(0)
    
    signal.signal(signal.SIGINT, sig_handler)
    sig_exit_flg = False

    try:
        curses.wrapper(main)
    except Exception, msg:
        print msg
